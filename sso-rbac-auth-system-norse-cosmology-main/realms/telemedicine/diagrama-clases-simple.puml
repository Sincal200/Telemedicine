@startuml DiagramaClasesTelemedicina

!theme plain

package "Models" {

    class Usuario {
        - idUsuario: INTEGER
        - keycloak_user_id: STRING
        - persona_id: INTEGER
        - roles_asignados: STRING
        - estado_aprobacion: ENUM
        - activo: BOOLEAN
        - creado: DATE
        - actualizado: DATE
        --
        + findByPk(id)
        + findAll()
        + create(data)
        + update(data, where)
        + destroy(where)
    }

    class Persona {
        - idPersona: INTEGER
        - tipo_documento_id: INTEGER
        - numero_documento: STRING
        - nombres: STRING
        - apellidos: STRING
        - email: STRING
        - telefono: STRING
        - telefono_emergencia: STRING
        - fecha_nacimiento: DATE
        - sexo_id: INTEGER
        - direccion_id: INTEGER
        - foto_perfil: STRING
        - activo: BOOLEAN
        - creado: DATE
        - actualizado: DATE
        --
        + findByPk(id)
        + findAll()
        + create(data)
        + update(data, where)
        + destroy(where)
    }

    class Paciente {
        - idPaciente: INTEGER
        - persona_id: INTEGER
        - numero_expediente: STRING
        - tipo_sangre: STRING
        - alergias: TEXT
        - enfermedades_cronicas: TEXT
        - medicamentos_actuales: TEXT
        - contacto_emergencia_nombre: STRING
        - contacto_emergencia_telefono: STRING
        - contacto_emergencia_parentesco: STRING
        - seguro_medico: STRING
        - numero_seguro: STRING
        - fecha_primera_consulta: DATE
        - activo: BOOLEAN
        - creado: DATE
        - actualizado: DATE
        --
        + findByPk(id)
        + findAll()
        + create(data)
        + update(data, where)
        + destroy(where)
    }

    class PersonalMedico {
        - idPersonalMedico: INTEGER
        - persona_id: INTEGER
        - centro_id: INTEGER
        - numero_licencia: STRING
        - numero_colegiado: STRING
        - especialidad_id: INTEGER
        - cargo: STRING
        - universidad: STRING
        - anos_experiencia: INTEGER
        - biografia: TEXT
        - calificacion_promedio: DECIMAL
        - total_consultas: INTEGER
        - activo: BOOLEAN
        - verificado: BOOLEAN
        - creado: DATE
        - actualizado: DATE
        --
        + findByPk(id)
        + findAll()
        + create(data)
        + update(data, where)
        + destroy(where)
    }

    class Cita {
        - idCita: INTEGER
        - numero_cita: STRING
        - paciente_id: INTEGER
        - personal_medico_id: INTEGER
        - centro_id: INTEGER
        - tipo_cita_id: INTEGER
        - estado_cita_id: INTEGER
        - prioridad_id: INTEGER
        - fecha_hora: DATE
        - motivo: TEXT
        - creado: DATE
        --
        + findByPk(id)
        + findAll()
        + create(data)
        + update(data, where)
        + destroy(where)
    }

    class Consulta {
        - idConsulta: INTEGER
        - cita_id: INTEGER
        - diagnostico_principal: TEXT
        - diagnosticos_secundarios: TEXT
        - tratamiento: TEXT
        - observaciones: TEXT
        - receta_medica: TEXT
        - examenes_solicitados: TEXT
        - proxima_cita_recomendada: DATE
        - duracion_minutos: INTEGER
        - calificacion_paciente: INTEGER
        - comentario_paciente: TEXT
        - requiere_seguimiento: BOOLEAN
        - fecha_seguimiento: DATE
        - creado: DATE
        - actualizado: DATE
        --
        + findByPk(id)
        + findAll()
        + create(data)
        + update(data, where)
        + destroy(where)
    }

    class ConfiguracionCentro {
        - idConfiguracion: INTEGER
        - nombre_centro: STRING
        - direccion: STRING
        - telefono: STRING
        - email: STRING
        - director_medico_id: INTEGER
        - administrador_sistema_id: INTEGER
        - activo: BOOLEAN
        - creado: DATE
        - actualizado: DATE
        --
        + findByPk(id)
        + findAll()
        + create(data)
        + update(data, where)
        + destroy(where)
    }

    class Especialidades {
        - idEspecialidad: INTEGER
        - nombre: STRING
        - descripcion: TEXT
        - activo: BOOLEAN
    }

    class TiposCita {
        - idTipoCita: INTEGER
        - nombre: STRING
        - descripcion: TEXT
        - duracion_estimada: INTEGER
        - precio: DECIMAL
        - activo: BOOLEAN
    }

    class EstadosCita {
        - idEstadoCita: INTEGER
        - nombre: STRING
        - descripcion: TEXT
        - color: STRING
    }

    class SignosVitales {
        - idSignosVitales: INTEGER
        - consulta_id: INTEGER
        - presion_sistolica: INTEGER
        - presion_diastolica: INTEGER
        - frecuencia_cardiaca: INTEGER
        - temperatura: DECIMAL
        - peso: DECIMAL
        - altura: DECIMAL
        - saturacion_oxigeno: INTEGER
        - tomado_por: INTEGER
        - fecha_toma: DATE
    }

    class Mensaje {
        - idMensaje: INTEGER
        - remitente_id: INTEGER
        - paciente_id: INTEGER
        - personal_medico_id: INTEGER
        - contenido: TEXT
        - fecha_envio: DATE
        - leido: BOOLEAN
    }

}

package "Controllers" {
    class CrudController {
        - Model: SequelizeModel
        --
        + getAll(req, res, next)
        + getById(req, res, next)
        + create(req, res, next)
        + update(req, res, next)
        + delete(req, res, next)
    }
}

package "Services" {
    class CrudService {
        - Model: SequelizeModel
        --
        + findAll()
        + findById(id)
        + create(data)
        + update(id, data)
        + delete(id)
    }
}

package "Middleware" {
    class AuthMiddleware {
        --
        + verifyToken(req, res, next)
        + extractUserFromToken(token)
    }

    class AuthorizationMiddleware {
        --
        + requireRole(roles)
        + checkPermission(permission)
        + hasAccess(user, resource)
    }

    class ErrorHandler {
        --
        + handleError(err, req, res, next)
        + notFound(req, res, next)
        + validationError(err)
    }
}

package "Sockets" {
    class WebRTCSignaling {
        - io: SocketIO
        - connectedUsers: Map
        --
        + handleConnection(socket)
        + handleDisconnection(socket)
        + handleOffer(socket, data)
        + handleAnswer(socket, data)
        + handleIceCandidate(socket, data)
        + joinRoom(socket, roomId)
        + leaveRoom(socket, roomId)
    }
}

' Relaciones principales
Usuario ||--o{ Persona : "tiene"
Persona ||--o{ Paciente : "es"
Persona ||--o{ PersonalMedico : "es"

Paciente ||--o{ Cita : "agenda"
PersonalMedico ||--o{ Cita : "atiende"
Cita ||--|| Consulta : "genera"
Consulta ||--o{ SignosVitales : "incluye"

PersonalMedico }o--|| Especialidades : "tiene"
Cita }o--|| TiposCita : "es de tipo"
Cita }o--|| EstadosCita : "tiene estado"
PersonalMedico }o--|| ConfiguracionCentro : "trabaja en"

' Relaciones Controllers-Services-Models
CrudController --> CrudService : "usa"
CrudService --> Usuario : "gestiona"
CrudService --> Persona : "gestiona"
CrudService --> Paciente : "gestiona"
CrudService --> PersonalMedico : "gestiona"
CrudService --> Cita : "gestiona"
CrudService --> Consulta : "gestiona"

' Middleware connections
AuthMiddleware --> Usuario : "valida"
AuthorizationMiddleware --> Usuario : "autoriza"
ErrorHandler --> CrudController : "maneja errores"

' WebRTC connections
WebRTCSignaling --> Mensaje : "crea"
WebRTCSignaling --> Usuario : "autentica"

@enduml
