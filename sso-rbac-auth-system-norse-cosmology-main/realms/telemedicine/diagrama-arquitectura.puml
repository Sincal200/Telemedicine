@startuml ArquitecturaControladores

!theme plain

package "API Layer" {
    
    class CitaController {
        - citaService: CrudService
        --
        + getAll(req, res, next)
        + getById(req, res, next)
        + create(req, res, next)
        + update(req, res, next)
        + delete(req, res, next)
        + getCitasPorPaciente(req, res, next)
        + getCitasPorMedico(req, res, next)
        + getCitasPorFecha(req, res, next)
    }

    class PacienteController {
        - pacienteService: CrudService
        --
        + getAll(req, res, next)
        + getById(req, res, next)
        + create(req, res, next)
        + update(req, res, next)
        + delete(req, res, next)
        + getHistorialMedico(req, res, next)
    }

    class PersonalMedicoController {
        - personalMedicoService: CrudService
        --
        + getAll(req, res, next)
        + getById(req, res, next)
        + create(req, res, next)
        + update(req, res, next)
        + delete(req, res, next)
        + getDisponibilidad(req, res, next)
        + updateDisponibilidad(req, res, next)
    }

    class ConsultaController {
        - consultaService: CrudService
        --
        + getAll(req, res, next)
        + getById(req, res, next)
        + create(req, res, next)
        + update(req, res, next)
        + delete(req, res, next)
        + getConsultasPorPaciente(req, res, next)
        + getConsultasPorMedico(req, res, next)
    }

    class UsuarioController {
        - usuarioService: CrudService
        --
        + getAll(req, res, next)
        + getById(req, res, next)
        + create(req, res, next)
        + update(req, res, next)
        + delete(req, res, next)
        + login(req, res, next)
        + register(req, res, next)
        + updateRoles(req, res, next)
    }
}

package "Service Layer" {
    
    class CrudService {
        - Model: SequelizeModel
        --
        + findAll(options)
        + findById(id, options)
        + findOne(where, options)
        + create(data, options)
        + update(id, data, options)
        + delete(id, options)
        + bulkCreate(dataArray, options)
        + count(where)
        + findAndCountAll(options)
    }

    class CitaService {
        - citaModel: Cita
        - pacienteModel: Paciente
        - personalMedicoModel: PersonalMedico
        --
        + findCitasDisponibles(fecha, especialidad)
        + agendarCita(citaData)
        + cancelarCita(citaId, motivo)
        + reagendarCita(citaId, nuevaFecha)
        + validarDisponibilidad(medicoId, fecha)
        + getCitasPorEstado(estado)
        + getProximasCitas(pacienteId)
    }

    class TelemedicineService {
        - consultaModel: Consulta
        - signosVitalesModel: SignosVitales
        - archivoModel: Archivo
        --
        + iniciarConsulta(citaId)
        + finalizarConsulta(consultaId, data)
        + registrarSignosVitales(consultaId, signos)
        + subirArchivo(consultaId, archivo)
        + generarReceta(consultaId, medicamentos)
        + programarSeguimiento(consultaId, fecha)
    }
}

package "Middleware Layer" {
    
    class AuthMiddleware {
        - jwtSecret: string
        - keycloakConfig: object
        --
        + verifyToken(req, res, next)
        + extractUserFromToken(token)
        + validateKeycloakToken(token)
        + refreshToken(req, res, next)
    }

    class AuthorizationMiddleware {
        - rolesHierarchy: object
        --
        + requireRole(roles)
        + requirePermission(permission)
        + checkResourceAccess(resourceType)
        + validateOwnership(req, res, next)
        + isAdmin(req, res, next)
        + isMedico(req, res, next)
        + isPaciente(req, res, next)
    }

    class ValidationMiddleware {
        --
        + validateCreateCita(req, res, next)
        + validateUpdatePaciente(req, res, next)
        + validateConsultaData(req, res, next)
        + validateSignosVitales(req, res, next)
        + sanitizeInput(req, res, next)
    }

    class ErrorHandler {
        --
        + handleError(err, req, res, next)
        + handleNotFound(req, res, next)
        + handleValidationError(err)
        + handleDatabaseError(err)
        + logError(err, req)
    }

    class LoggingMiddleware {
        - logSistemaModel: LogSistema
        --
        + logRequest(req, res, next)
        + logUserAction(userId, action, data)
        + logDatabaseChange(table, recordId, oldData, newData)
        + logSecurityEvent(event, req)
    }
}

package "Socket Layer" {
    
    class WebRTCSignaling {
        - io: SocketIO
        - connectedUsers: Map
        - activeRooms: Map
        --
        + handleConnection(socket)
        + handleDisconnection(socket)
        + authenticateSocket(socket, token)
        + joinConsultaRoom(socket, consultaId)
        + leaveConsultaRoom(socket, consultaId)
        + handleOffer(socket, data)
        + handleAnswer(socket, data)
        + handleIceCandidate(socket, data)
        + broadcastToRoom(roomId, event, data)
        + notifyRoomUsers(roomId, message)
    }

    class ChatService {
        - mensajeModel: Mensaje
        - io: SocketIO
        --
        + sendMessage(fromUserId, toUserId, content)
        + getMessageHistory(userId1, userId2)
        + markAsRead(messageId, userId)
        + getUnreadCount(userId)
        + broadcastMessage(roomId, message)
        + notifyNewMessage(userId, message)
    }
}

package "Database Models" {
    class Cita {
        + findByPk(id)
        + findAll(options)
        + create(data)
        + update(data, where)
        + destroy(where)
    }

    class Paciente {
        + findByPk(id)
        + findAll(options)
        + create(data)
        + update(data, where)
        + destroy(where)
    }

    class PersonalMedico {
        + findByPk(id)
        + findAll(options)
        + create(data)
        + update(data, where)
        + destroy(where)
    }

    class Consulta {
        + findByPk(id)
        + findAll(options)
        + create(data)
        + update(data, where)
        + destroy(where)
    }

    class Usuario {
        + findByPk(id)
        + findAll(options)
        + create(data)
        + update(data, where)
        + destroy(where)
    }
}

' Relaciones de Controllers con Services
CitaController --> CitaService : "usa"
CitaController --> CrudService : "hereda"
PacienteController --> CrudService : "usa"
PersonalMedicoController --> CrudService : "usa"
ConsultaController --> TelemedicineService : "usa"
UsuarioController --> CrudService : "usa"

' Relaciones de Services con Models
CrudService --> Cita : "gestiona"
CrudService --> Paciente : "gestiona"
CrudService --> PersonalMedico : "gestiona"
CrudService --> Consulta : "gestiona"
CrudService --> Usuario : "gestiona"

CitaService --> Cita : "especializa"
CitaService --> Paciente : "consulta"
CitaService --> PersonalMedico : "consulta"

TelemedicineService --> Consulta : "gestiona"

' Middleware aplicado a Controllers
AuthMiddleware --> CitaController : "autentica"
AuthMiddleware --> PacienteController : "autentica"
AuthMiddleware --> PersonalMedicoController : "autentica"
AuthMiddleware --> ConsultaController : "autentica"
AuthMiddleware --> UsuarioController : "autentica"

AuthorizationMiddleware --> CitaController : "autoriza"
AuthorizationMiddleware --> PacienteController : "autoriza"
AuthorizationMiddleware --> PersonalMedicoController : "autoriza"
AuthorizationMiddleware --> ConsultaController : "autoriza"

ValidationMiddleware --> CitaController : "valida"
ValidationMiddleware --> PacienteController : "valida"
ValidationMiddleware --> ConsultaController : "valida"

ErrorHandler --> CitaController : "maneja errores"
ErrorHandler --> PacienteController : "maneja errores"
ErrorHandler --> PersonalMedicoController : "maneja errores"
ErrorHandler --> ConsultaController : "maneja errores"
ErrorHandler --> UsuarioController : "maneja errores"

LoggingMiddleware --> CitaController : "registra acciones"
LoggingMiddleware --> PacienteController : "registra acciones"
LoggingMiddleware --> PersonalMedicoController : "registra acciones"
LoggingMiddleware --> ConsultaController : "registra acciones"

' Socket connections
WebRTCSignaling --> ConsultaController : "notifica eventos"
ChatService --> UsuarioController : "gestiona mensajes"

@enduml
