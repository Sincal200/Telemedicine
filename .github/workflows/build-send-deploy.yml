name: Build existing services only

on:
  workflow_dispatch: {}

jobs:
  check-services:
    runs-on: ubuntu-latest
    outputs:
      api-gateway-exists: ${{ steps.check.outputs.api-gateway }}
      auth-service-exists: ${{ steps.check.outputs.auth-service }}
      telemedicine-exists: ${{ steps.check.outputs.telemedicine }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Check which services exist
        id: check
        run: |
          # Check api-gateway
          if [ -d "api-gateway" ] && [ -f "api-gateway/Dockerfile" ]; then
            echo "api-gateway=true" >> $GITHUB_OUTPUT
            echo "✅ api-gateway exists"
          else
            echo "api-gateway=false" >> $GITHUB_OUTPUT
            echo "❌ api-gateway missing"
          fi
          
          # Check auth-service
          if [ -d "auth-service" ] && [ -f "auth-service/Dockerfile" ]; then
            echo "auth-service=true" >> $GITHUB_OUTPUT
            echo "✅ auth-service exists"
          else
            echo "auth-service=false" >> $GITHUB_OUTPUT
            echo "❌ auth-service missing"
          fi
          
          # Check telemedicine (multiple possible locations)
          if [ -d "realms/telemedicine" ] && [ -f "realms/telemedicine/Dockerfile" ]; then
            echo "telemedicine=realms/telemedicine" >> $GITHUB_OUTPUT
            echo "✅ telemedicine exists at realms/telemedicine"
          elif [ -d "telemedicine" ] && [ -f "telemedicine/Dockerfile" ]; then
            echo "telemedicine=telemedicine" >> $GITHUB_OUTPUT
            echo "✅ telemedicine exists at telemedicine"
          else
            echo "telemedicine=false" >> $GITHUB_OUTPUT
            echo "❌ telemedicine missing"
          fi

  build-api-gateway:
    runs-on: ubuntu-latest
    needs: check-services
    if: needs.check-services.outputs.api-gateway-exists == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build api-gateway
        run: |
          echo "Building api-gateway..."
          DOCKER_BUILDKIT=1 docker build \
            -f "api-gateway/Dockerfile" \
            -t "local/api-gateway:sha-${{ github.sha }}" \
            "api-gateway"

      - name: Save & compress image
        run: |
          docker save "local/api-gateway:sha-${{ github.sha }}" | gzip > "api-gateway-image.tar.gz"
          ls -lh "api-gateway-image.tar.gz"

      - name: Send image to Droplet
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "api-gateway-image.tar.gz"
          target: "~/images"

  build-auth-service:
    runs-on: ubuntu-latest
    needs: check-services
    if: needs.check-services.outputs.auth-service-exists == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build auth-service
        run: |
          echo "Building auth-service..."
          DOCKER_BUILDKIT=1 docker build \
            -f "auth-service/Dockerfile" \
            -t "local/auth-service:sha-${{ github.sha }}" \
            "auth-service"

      - name: Save & compress image
        run: |
          docker save "local/auth-service:sha-${{ github.sha }}" | gzip > "auth-service-image.tar.gz"
          ls -lh "auth-service-image.tar.gz"

      - name: Send image to Droplet
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "auth-service-image.tar.gz"
          target: "~/images"

  build-telemedicine:
    runs-on: ubuntu-latest
    needs: check-services
    if: needs.check-services.outputs.telemedicine-exists != 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build telemedicine
        run: |
          TELEMEDICINE_PATH="${{ needs.check-services.outputs.telemedicine-exists }}"
          echo "Building telemedicine from path: $TELEMEDICINE_PATH"
          
          DOCKER_BUILDKIT=1 docker build \
            -f "$TELEMEDICINE_PATH/Dockerfile" \
            -t "local/telemedicine:sha-${{ github.sha }}" \
            "$TELEMEDICINE_PATH"

      - name: Save & compress image
        run: |
          docker save "local/telemedicine:sha-${{ github.sha }}" | gzip > "telemedicine-image.tar.gz"
          ls -lh "telemedicine-image.tar.gz"

      - name: Send image to Droplet
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "telemedicine-image.tar.gz"
          target: "~/images"

  deploy:
    runs-on: ubuntu-latest
    needs: [check-services, build-api-gateway, build-auth-service, build-telemedicine]
    if: always() && (needs.build-api-gateway.result == 'success' || needs.build-auth-service.result == 'success' || needs.build-telemedicine.result == 'success' || needs.build-api-gateway.result == 'skipped' || needs.build-auth-service.result == 'skipped' || needs.build-telemedicine.result == 'skipped')
    env:
      COMPOSE_DIR: ${{ secrets.COMPOSE_DIR }}
    steps:
      - name: Deploy services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            #!/bin/bash
            set -e
            
            echo "Starting deployment process..."
            
            # Usar directorio home para imágenes
            IMAGE_DIR="/home/$USER/images"
            mkdir -p "$IMAGE_DIR"
            cd "$IMAGE_DIR"
            
            echo "Current directory: $(pwd)"
            echo "Available files:"
            ls -la
            
            # Cargar imágenes que existan
            for svc in api-gateway auth-service telemedicine; do
              TAR="${svc}-image.tar.gz"
              if [ -f "$TAR" ]; then
                echo "Loading $TAR..."
                gunzip -c "$TAR" | docker load
                
                # Encontrar y re-taggear imagen
                IMG=$(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep "local/${svc}:sha-" | head -n1 || true)
                if [ -n "$IMG" ]; then
                  # Backup anterior si existe
                  if docker image inspect "local/${svc}:deployed" >/dev/null 2>&1; then
                    docker tag "local/${svc}:deployed" "local/${svc}:prev" || true
                  fi
                  docker tag "$IMG" "local/${svc}:deployed"
                  echo "Tagged: $IMG -> local/${svc}:deployed"
                fi
                rm -f "$TAR"
              fi
            done
            
            # Mostrar imágenes disponibles
            echo "Available images:"
            docker images | grep local/ || echo "No local images found"
            
            # Deploy con compose
            COMPOSE_PATH="${COMPOSE_DIR:-/home/$USER}"
            cd "$COMPOSE_PATH"
            
            if [ -f "docker-compose.yaml" ] || [ -f "docker-compose.yml" ]; then
              echo "Starting services with docker compose..."
              docker compose up -d
              echo "Services status:"
              docker compose ps
            else
              echo "No compose file found in $COMPOSE_PATH"
              ls -la
            fi
            
            # Limpiar imágenes huérfanas
            docker image prune -f
