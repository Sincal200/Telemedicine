name: Build images locally, send to Droplet & deploy (no registry)

on:
  push:
    branches: [ main ]
    paths:
      - 'sso-rbac-auth-system-norse-cosmology-main/api-gateway/**'
      - 'sso-rbac-auth-system-norse-cosmology-main/auth-service/**'
      - 'sso-rbac-auth-system-norse-cosmology-main/realms/telemedicine/**'
      - '.github/workflows/build-send-deploy.yml'
  workflow_dispatch: {}

jobs:
  build-and-send:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: api-gateway
            context: sso-rbac-auth-system-norse-cosmology-main/api-gateway
            dockerfile: sso-rbac-auth-system-norse-cosmology-main/api-gateway/Dockerfile
            image: local/api-gateway
            path_filter: 'sso-rbac-auth-system-norse-cosmology-main/api-gateway/**'
          - name: auth-service
            context: sso-rbac-auth-system-norse-cosmology-main/auth-service
            dockerfile: sso-rbac-auth-system-norse-cosmology-main/auth-service/Dockerfile
            image: local/auth-service
            path_filter: 'sso-rbac-auth-system-norse-cosmology-main/auth-service/**'
          - name: telemedicine
            context: sso-rbac-auth-system-norse-cosmology-main/realms/telemedicine
            dockerfile: sso-rbac-auth-system-norse-cosmology-main/realms/telemedicine/Dockerfile
            image: local/telemedicine
            path_filter: 'sso-rbac-auth-system-norse-cosmology-main/realms/telemedicine/**'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify service exists
        run: |
          echo "Checking if service ${{ matrix.name }} exists..."
          echo "Context path: ${{ matrix.context }}"
          echo "Dockerfile path: ${{ matrix.dockerfile }}"
          
          if [ -d "${{ matrix.context }}" ]; then
            echo "‚úÖ Context directory exists"
            ls -la "${{ matrix.context }}"
          else
            echo "‚ùå Context directory does not exist"
            exit 1
          fi
          
          if [ -f "${{ matrix.dockerfile }}" ]; then
            echo "‚úÖ Dockerfile exists"
          else
            echo "‚ùå Dockerfile does not exist"
            exit 1
          fi

      - name: Detect service changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            service:
              - ${{ matrix.path_filter }}

      # FORZAR CONSTRUCCI√ìN - quita las condiciones temporalmente
      - name: Set up Docker Buildx
        # if: steps.changes.outputs.service == 'true'  # COMENTADO PARA FORZAR BUILD
        uses: docker/setup-buildx-action@v3

      - name: Build image
        # if: steps.changes.outputs.service == 'true'  # COMENTADO PARA FORZAR BUILD
        run: |
          echo "Building ${{ matrix.name }}..."
          echo "Using context: ${{ matrix.context }}"
          echo "Using dockerfile: ${{ matrix.dockerfile }}"
          
          DOCKER_BUILDKIT=1 docker build \
            -f "${{ matrix.dockerfile }}" \
            -t "${{ matrix.image }}:sha-${{ github.sha }}" \
            "${{ matrix.context }}"
          
          echo "‚úÖ Successfully built ${{ matrix.image }}:sha-${{ github.sha }}"

      - name: Save & compress image
        # if: steps.changes.outputs.service == 'true'  # COMENTADO PARA FORZAR BUILD
        run: |
          docker save "${{ matrix.image }}:sha-${{ github.sha }}" | gzip > "${{ matrix.name }}-image.tar.gz"
          ls -lh "${{ matrix.name }}-image.tar.gz"

      - name: Send image to Droplet (SCP)
        # if: steps.changes.outputs.service == 'true'  # COMENTADO PARA FORZAR BUILD
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "${{ matrix.name }}-image.tar.gz"
          target: "~/images"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-send
    env:
      COMPOSE_DIR: ${{ secrets.COMPOSE_DIR }}
    steps:
      - name: Deploy (load, retag to :deployed, compose up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            #!/bin/bash
            set -e
            
            echo "Starting deployment process..."
            
            # Usar directorio home para im√°genes
            IMAGE_DIR="/home/$USER/images"
            echo "Creating images directory: $IMAGE_DIR"
            mkdir -p "$IMAGE_DIR"
            cd "$IMAGE_DIR"
            
            echo "Current directory: $(pwd)"
            echo "Available files:"
            ls -la
            
            # Cargar im√°genes recibidas
            for svc in api-gateway auth-service telemedicine; do
              TAR="${svc}-image.tar.gz"
              echo "Processing service: ${svc}"
              
              if [ -f "$TAR" ]; then
                echo "Found $TAR, loading..."
                
                if gunzip -c "$TAR" | docker load; then
                  echo "Successfully loaded $TAR"
                  
                  # Encontrar imagen cargada
                  IMG=$(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep "local/${svc}:sha-" | head -n1 || true)
                  
                  if [ -n "$IMG" ]; then
                    echo "Found loaded image: $IMG"
                    
                    # Backup imagen anterior si existe
                    if docker image inspect "local/${svc}:deployed" >/dev/null 2>&1; then
                      echo "Backing up current deployed image as :prev"
                      docker tag "local/${svc}:deployed" "local/${svc}:prev" || true
                    fi
                    
                    # Tag como deployed
                    echo "Tagging as deployed: $IMG -> local/${svc}:deployed"
                    docker tag "$IMG" "local/${svc}:deployed"
                    
                  else
                    echo "ERROR: No loaded image found for ${svc}"
                  fi
                else
                  echo "ERROR: Failed to load $TAR"
                fi
                
                # Limpiar archivo tar
                echo "Removing $TAR"
                rm -f "$TAR"
                
              else
                echo "No tar file found for ${svc}"
                
                if docker image inspect "local/${svc}:deployed" >/dev/null 2>&1; then
                  echo "Existing deployed image found for ${svc}"
                else
                  echo "WARNING: No deployed image exists for ${svc}"
                fi
              fi
              
              echo "---"
            done
            
            # Mostrar im√°genes disponibles
            echo "Available Docker images:"
            docker images | grep -E "(local/|REPOSITORY)" || echo "No local images found"
            
            # Cambiar al directorio de compose
            COMPOSE_PATH="${COMPOSE_DIR:-/home/$USER}"
            echo "Changing to compose directory: $COMPOSE_PATH"
            
            if [ -d "$COMPOSE_PATH" ]; then
              cd "$COMPOSE_PATH"
              echo "Current directory: $(pwd)"
              echo "Directory contents:"
              ls -la
              
              # Buscar archivo de compose
              if [ -f "docker-compose.yaml" ]; then
                COMPOSE_FILE="docker-compose.yaml"
              elif [ -f "docker-compose.yml" ]; then
                COMPOSE_FILE="docker-compose.yml"
              elif [ -f "compose.yaml" ]; then
                COMPOSE_FILE="compose.yaml"
              elif [ -f "compose.yml" ]; then
                COMPOSE_FILE="compose.yml"
              else
                COMPOSE_FILE=""
              fi
              
              if [ -n "$COMPOSE_FILE" ]; then
                echo "Found compose file: $COMPOSE_FILE"
                echo "Starting services..."
                
                if docker compose -f "$COMPOSE_FILE" up -d; then
                  echo "‚úÖ Successfully started services"
                  
                  echo "Service status:"
                  docker compose -f "$COMPOSE_FILE" ps
                  
                  echo "Service logs (last 10 lines each):"
                  docker compose -f "$COMPOSE_FILE" logs --tail=10
                else
                  echo "‚ùå Failed to start services"
                  echo "Compose logs:"
                  docker compose -f "$COMPOSE_FILE" logs --tail=50
                  exit 1
                fi
              else
                echo "‚ùå No compose file found in $COMPOSE_PATH"
                echo "Available files:"
                ls -la
                exit 1
              fi
            else
              echo "‚ùå Compose directory $COMPOSE_PATH does not exist"
              exit 1
            fi
            
            # Limpiar im√°genes hu√©rfanas
            echo "Cleaning up dangling images..."
            docker image prune -f
            
            echo "üéâ Deployment completed successfully!"
